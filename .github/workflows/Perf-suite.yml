name: perf-suite

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  jmeter-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: smoke
            threads: 50
            rampup: 30
            duration: 60
          - scenario: load
            threads: 100
            rampup: 60
            duration: 180
          - scenario: stress
            threads: 300
            rampup: 60
            duration: 120
          - scenario: spike
            threads: 200
            rampup: 10
            duration: 60
          - scenario: soak
            threads: 50
            rampup: 30
            duration: 900

    env:
      # Where Grafana is reachable from the runner (Docker publishes 3000 to host)
      GRAFANA_URL: http://localhost:3000
      # Use the same dashboard URLs you use in the browser (we will resolve UID by slug)
      GRAFANA_JMETER_URL: http://localhost:3000/d/JMeterOverview/jmeter-overview?orgId=1
      GRAFANA_CAD_URL:    http://localhost:3000/d/container-metrics/container-metrics-cadvisor?orgId=1
      GRAFANA_AUTH: admin:admin
      GRAFANA_ORGID_DEFAULT: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start minimal infra (httpbin + monitoring + grafana)
        run: |
          set -eux
          docker compose up -d influxdb httpbin grafana renderer loki promtail prometheus cadvisor
          # Wait for Grafana to be ready
          for i in {1..60}; do
            curl -fsS "${GRAFANA_URL}/api/health" >/dev/null && break || sleep 2
          done

      - name: Build JMeter image (5.6.3)
        run: docker build -t jmeter:5.6.3 ./jmeter/docker

      - name: Run ${{ matrix.scenario }} (CSV JTL + HTML report)
        id: run_test
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          ROOT=jmeter/results
          OUT="$ROOT/$SCEN"
          CSV_JTL="$ROOT/${SCEN}.csv"
          mkdir -p "$OUT"
          rm -f "$CSV_JTL" || true
          rm -rf "$OUT/html" || true

          START_MS=$(( $(date -u +%s) * 1000 ))
          echo "start_ms=${START_MS}" >> "$GITHUB_OUTPUT"

          # Run headless + write CSV JTL + generate HTML
          set +e
          docker run --rm --network host \
            -e JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m" \
            -v "$GITHUB_WORKSPACE/jmeter:/jmeter" -w /jmeter jmeter:5.6.3 \
            -n -t testplans/httpbin_load.jmx \
            -Jthreads=${{ matrix.threads }} \
            -Jrampup=${{ matrix.rampup }} \
            -Jduration=${{ matrix.duration }} \
            -Jscenario_name=$SCEN \
            -Jtarget_host=localhost -Jtarget_port=8080 \
            -Jjmeter.save.saveservice.output_format=csv \
            -Jjmeter.save.saveservice.print_field_names=true \
            -Jjmeter.save.saveservice.default_delimiter=, \
            -Jjmeter.save.saveservice.timestamp_format=ms \
            -Jjmeter.save.saveservice.data_type=true \
            -Jjmeter.save.saveservice.label=true \
            -Jjmeter.save.saveservice.response_code=true \
            -Jjmeter.save.saveservice.response_message=true \
            -Jjmeter.save.saveservice.thread_name=true \
            -Jjmeter.save.saveservice.successful=true \
            -Jjmeter.save.saveservice.failure_message=true \
            -Jjmeter.save.saveservice.bytes=true \
            -Jjmeter.save.saveservice.sent_bytes=true \
            -Jjmeter.save.saveservice.grp_threads=true \
            -Jjmeter.save.saveservice.all_threads=true \
            -Jjmeter.save.saveservice.url=true \
            -Jjmeter.save.saveservice.latency=true \
            -Jjmeter.save.saveservice.idle_time=true \
            -Jjmeter.save.saveservice.connect_time=true \
            -l "results/${SCEN}.csv" \
            -j "results/${SCEN}/jmeter.log" \
            -e -o "results/${SCEN}/html"
          EXIT=$?
          set -e

          echo "JMeter exit (info): $EXIT"
          head -n 1 "$CSV_JTL" || true
          test -f "$OUT/html/index.html" && echo "HTML OK" || echo "HTML MISSING"

      - name: Render Grafana panels (${{ matrix.scenario }})
        if: always()
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          OUT_DIR="jmeter/results/${SCEN}/grafana"
          mkdir -p "${OUT_DIR}"

          FROM_MS="${{ steps.run_test.outputs.start_ms }}"
          TO_MS=$(( $(date -u +%s) * 1000 ))
          AUTH_FLAG="-u ${GRAFANA_AUTH}"

          # ---------- helpers ----------
          # Parse (slug, orgId) from /d/<uid>/<slug>?orgId=N; ignore the uid in URL
          parse_slug_org () {
            local url="$1"
            local rest="${url#*/d/}"
            local path="${rest%%\?*}"
            local slug="${path#*/}"
            local q="${rest#*\?}"
            local org="$(echo "$q" | sed -n -E 's/.*(^|&)orgId=([^&]+).*/\2/p')"
            [ -z "$org" ] && org="${GRAFANA_ORGID_DEFAULT}"
            echo "$slug" "$org"
          }

          # Resolve UID by slug using /api/search
          resolve_uid_by_slug () {
            local slug="$1"
            local res
            res="$(curl -fsS ${AUTH_FLAG} "${GRAFANA_URL}/api/search?type=dash-db&query=${slug}")"
            local uid url
            uid="$(echo "$res" | jq -r \
              'map(select((.url|endswith("/'"$slug"'")) or (.slug=="'"$slug"'"))) | .[0].uid // empty')"
            url="$(echo "$res" | jq -r \
              'map(select((.url|endswith("/'"$slug"'")) or (.slug=="'"$slug"'"))) | .[0].url // empty')"
            if [ -z "$uid" ]; then
              echo "ERROR: Could not resolve UID for slug '${slug}'" >&2
              echo ""
              return 1
            fi
            echo "$uid" "${url##*/}"
          }

          # List non-row panels
          list_panels () {
            local uid="$1"
            curl -fsS ${AUTH_FLAG} "${GRAFANA_URL}/api/dashboards/uid/${uid}" \
              | jq -r '
                  .dashboard
                  | .. | objects
                  | select(has("id") and has("title"))
                  | select(.type != "row")
                  | "\(.id)\t\(.title)"'
          }

          render_panel () {
            local uid="$1" slug="$2" org="$3" pid="$4" title="$5"
            local base="$(echo "$title" | tr -cs '[:alnum:]_-' '_' | sed 's/_\+/_/g;s/^_//;s/_$//')"
            local out="${OUT_DIR}/${uid}_${pid}_${base}.png"
            curl -fsSL ${AUTH_FLAG} \
              "${GRAFANA_URL}/render/d-solo/${uid}/${slug}?orgId=${org}&panelId=${pid}&from=${FROM_MS}&to=${TO_MS}&width=1600&height=800&tz=UTC&theme=dark" \
              -o "${out}" || true
            echo "Saved: ${out}"
          }

          # ---------- resolve and render ----------
          read JM_SLUG JM_ORGID  < <(parse_slug_org "$GRAFANA_JMETER_URL")
          read CAD_SLUG CAD_ORGID < <(parse_slug_org "$GRAFANA_CAD_URL")

          read JM_UID JM_SLUG_R   < <(resolve_uid_by_slug "$JM_SLUG")
          read CAD_UID CAD_SLUG_R < <(resolve_uid_by_slug "$CAD_SLUG")
          [ -z "$JM_SLUG_R" ] && JM_SLUG_R="$JM_SLUG"
          [ -z "$CAD_SLUG_R" ] && CAD_SLUG_R="$CAD_SLUG"

          echo "Resolved:"
          echo "  JMeterOverview -> uid=${JM_UID} slug=${JM_SLUG_R} orgId=${JM_ORGID}"
          echo "  cAdvisor       -> uid=${CAD_UID} slug=${CAD_SLUG_R} orgId=${CAD_ORGID}"

          for rec in "JM:${JM_UID}:${JM_SLUG_R}:${JM_ORGID}" "CAD:${CAD_UID}:${CAD_SLUG_R}:${CAD_ORGID}"; do
            IFS=: read tag DUID DSLUG DORGID <<<"${rec}"
            [ -z "$DUID" ] && { echo "skip ${tag}: uid not resolved"; continue; }
            echo "Rendering ${tag} (uid=${DUID}, slug=${DSLUG})..."
            list_panels "${DUID}" | while IFS=$'\t' read -r pid ptitle; do
              echo "  panelId=${pid} title=${ptitle}"
              render_panel "${DUID}" "${DSLUG}" "${DORGID}" "${pid}" "${ptitle}"
            done
          done

          ls -l "${OUT_DIR}" || true

      - name: Upload artifacts (${{ matrix.scenario }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-${{ matrix.scenario }}-${{ github.run_id }}-${{ github.run_attempt }}
          retention-days: 30
          if-no-files-found: warn
          path: |
            jmeter/results/${{ matrix.scenario }}/html
            jmeter/results/${{ matrix.scenario }}.csv
            jmeter/results/${{ matrix.scenario }}/jmeter.log
            jmeter/results/${{ matrix.scenario }}/grafana

      - name: Stop stack
        if: always()
        run: docker compose down -v
