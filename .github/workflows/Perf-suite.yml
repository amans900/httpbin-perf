name: perf-suite

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  # schedule:
  #   - cron: "0 2 * * *"   # optional nightly

jobs:
  jmeter-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: smoke
            threads: 50
            rampup: 30
            duration: 60
          - scenario: load
            threads: 100
            rampup: 60
            duration: 180
          - scenario: stress
            threads: 300
            rampup: 60
            duration: 120
          - scenario: spike
            threads: 200
            rampup: 10
            duration: 60
          - scenario: soak
            threads: 50
            rampup: 30
            duration: 300

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start minimal infra (httpbin + monitoring)
        run: |
          set -eux
          docker compose up -d influxdb httpbin grafana loki promtail prometheus cadvisor
          sleep 15
          docker ps

      - name: Build JMeter image (5.6.3)
        run: docker build -t jmeter:5.6.3 ./jmeter/docker

      # --------- RUN TEST (force XML JTL to a DIFFERENT filename; capture exit code) ---------
      - name: Run ${{ matrix.scenario }} test (headless; XML JTL + jmeter.log)
        id: run_test
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          XML_JTL="jmeter/results/${SCEN}.xml.jtl"   # <-- our file (XML)
          CSV_JTL="jmeter/results/${SCEN}.jtl"       # <-- file possibly written by the JMX (CSV)
          mkdir -p jmeter/results/${SCEN}/html
          rm -f "$XML_JTL" "$CSV_JTL" || true

          # Run headless and FORCE XML output via JVM_ARGS; write to our XML_JTL
          set +e
          docker run --rm --network host \
            -e JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m \
                         -Djmeter.save.saveservice.output_format=xml \
                         -Djmeter.save.saveservice.assertion_results=none" \
            -v "$GITHUB_WORKSPACE/jmeter:/jmeter" -w /jmeter jmeter:5.6.3 \
            -n -t testplans/httpbin_load.jmx \
            -Jthreads=${{ matrix.threads }} \
            -Jrampup=${{ matrix.rampup }} \
            -Jduration=${{ matrix.duration }} \
            -Jscenario_name=$SCEN \
            -Jtarget_host=localhost -Jtarget_port=8080 \
            -l "results/${SCEN}.xml.jtl" \
            -j "results/${SCEN}/jmeter.log"
          EXIT=$?
          set -e

          echo "---- First line of our JTL (should be XML prolog) ----"
          head -n 1 "$XML_JTL" || true

          # If the plan also wrote a CSV JTL to results/<scenario>.jtl, show a hint
          if [ -f "$CSV_JTL" ]; then
            echo "Detected CSV written by JMX at $CSV_JTL (kept for debugging)."
            head -n 2 "$CSV_JTL" || true
          fi

          echo "exit_code=$EXIT" >> $GITHUB_OUTPUT

      # --------- Generate HTML (always, using our XML JTL) ---------
      - name: Generate HTML report (${{ matrix.scenario }})
        if: always()
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          XML_JTL="jmeter/results/${SCEN}.xml.jtl"
          if [ -s "$XML_JTL" ]; then
            docker run --rm --network host \
              -e JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m" \
              -v "$GITHUB_WORKSPACE/jmeter:/jmeter" -w /jmeter jmeter:5.6.3 \
              -g "results/${SCEN}.xml.jtl" -o "results/${SCEN}/html"
          else
            echo "No XML JTL for $SCEN; skipping HTML generation."
          fi
          ls -R jmeter/results/$SCEN || true

      # --------- Always upload artifacts (HTML + our XML JTL + any CSV JTL + jmeter.log) ---------
      - name: Upload artifacts (${{ matrix.scenario }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-${{ matrix.scenario }}-artifacts
          retention-days: 30
          if-no-files-found: warn
          path: |
            jmeter/results/${{ matrix.scenario }}/html
            jmeter/results/${{ matrix.scenario }}.xml.jtl
            jmeter/results/${{ matrix.scenario }}.jtl
            jmeter/results/${{ matrix.scenario }}/jmeter.log

      - name: Stop stack
        if: always()
        run: docker compose down -v

      # --------- Mark job failed at the very end if JMeter exited non-zero ---------
      - name: Fail job if scenario failed
        if: steps.run_test.outputs.exit_code != '0'
        run: |
          echo "JMeter exit code: ${{ steps.run_test.outputs.exit_code }}"
          exit 1
