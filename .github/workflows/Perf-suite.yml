name: perf-suite

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  # schedule:
  #   - cron: "0 2 * * *"   # optional nightly

jobs:
  jmeter-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: smoke
            threads: 50
            rampup: 30
            duration: 60
          - scenario: load
            threads: 100
            rampup: 60
            duration: 180
          - scenario: stress
            threads: 300
            rampup: 60
            duration: 120
          - scenario: spike
            threads: 200
            rampup: 10
            duration: 60
          - scenario: soak
            threads: 50
            rampup: 30
            duration: 300

    env:
      # --- tweak these SLAs as you like ---
      SLA_ERROR_PERCENT: "1.0"   # fail if error% > this
      # You can add more later (p95 latency, etc.)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start minimal infra (httpbin + monitoring)
        run: |
          set -eux
          docker compose up -d influxdb httpbin grafana loki promtail prometheus cadvisor
          sleep 15
          docker ps

      - name: Build JMeter image (5.6.3)
        run: docker build -t jmeter:5.6.3 ./jmeter/docker

      # ---- Run test AND generate dashboard; do not fail the job here ----
      - name: Run ${{ matrix.scenario }} (headless; XML JTL; generate HTML)
        id: run_test
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          OUT=jmeter/results/$SCEN
          XML_JTL="jmeter/results/${SCEN}.xml.jtl"
          CSV_JTL="jmeter/results/${SCEN}.jtl"  # may be written by JMX; keep for debugging

          rm -rf "$OUT" "$XML_JTL" "$CSV_JTL" || true
          mkdir -p "$OUT"

          # Force XML JTL and build dashboard in the same process (-e -o)
          set +e
          docker run --rm --network host \
            -e JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m \
                         -Djmeter.save.saveservice.output_format=xml \
                         -Djmeter.save.saveservice.assertion_results=none" \
            -v "$GITHUB_WORKSPACE/jmeter:/jmeter" -w /jmeter jmeter:5.6.3 \
            -n -t testplans/httpbin_load.jmx \
            -Jthreads=${{ matrix.threads }} \
            -Jrampup=${{ matrix.rampup }} \
            -Jduration=${{ matrix.duration }} \
            -Jscenario_name=$SCEN \
            -Jtarget_host=localhost -Jtarget_port=8080 \
            -l "results/${SCEN}.xml.jtl" \
            -j "results/${SCEN}/jmeter.log" \
            -e -o "results/${SCEN}/html"
          EXIT=$?
          set -e

          echo "JMeter raw exit code: $EXIT"
          head -n 1 "$XML_JTL" || true
          test -f "$OUT/html/index.html" && echo "Dashboard generated." || echo "Dashboard missing."
          if [ -f "$CSV_JTL" ]; then
            echo "CSV also found (from JMX): $CSV_JTL"
            head -n 2 "$CSV_JTL" || true
          fi

          # Store the raw exit code for visibility (we won't fail the job only because of it)
          echo "exit_code=$EXIT" >> $GITHUB_OUTPUT

      - name: Upload artifacts (${{ matrix.scenario }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-${{ matrix.scenario }}-artifacts
          retention-days: 30
          if-no-files-found: warn
          path: |
            jmeter/results/${{ matrix.scenario }}/html
            jmeter/results/${{ matrix.scenario }}.xml.jtl
            jmeter/results/${{ matrix.scenario }}.jtl
            jmeter/results/${{ matrix.scenario }}/jmeter.log

      # ---- Evaluate SLAs from XML JTL and decide pass/fail here ----
      - name: Evaluate SLAs (${{ matrix.scenario }})
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          XML_JTL="jmeter/results/${SCEN}.xml.jtl"

          if [ ! -s "$XML_JTL" ]; then
            echo "::error::Missing XML JTL ($XML_JTL)."
            exit 1
          fi

          # Count total HTTP samples and failures from XML
          TOTAL=$(grep -o '<httpSample ' "$XML_JTL" | wc -l || true)
          # include transaction controllers if you use <sample ...>, add: + $(grep -o '<sample ' ... | wc -l)
          FAILS=$(grep -o ' s="false"' "$XML_JTL" | wc -l || true)

          if [ "${TOTAL:-0}" -eq 0 ]; then
            echo "::error::No samples recorded."
            exit 1
          fi

          ERR_PCT=$(awk -v f="$FAILS" -v t="$TOTAL" 'BEGIN{printf("%.2f", (f*100)/t)}')
          echo "Scenario: $SCEN | Total: $TOTAL | Failures: $FAILS | Error%: $ERR_PCT"

          THRESH="${SLA_ERROR_PERCENT}"
          # Fail if error% > threshold
          awk -v r="$ERR_PCT" -v th="$THRESH" 'BEGIN{ if (r > th) { exit 1 } }' \
          || { echo "::error::Error rate ${ERR_PCT}% exceeded SLA ${THRESH}%"; exit 1; }

          echo "SLA OK: error ${ERR_PCT}% â‰¤ ${THRESH}%"

      - name: Stop stack
        if: always()
        run: docker compose down -v
