name: perf-suite

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"
  GRAFANA_URL: http://localhost:3000
  GRAFANA_JMETER_URL: http://localhost:3000/d/JMeterOverview/jmeter-overview?orgId=1
  GRAFANA_CAD_URL: http://localhost:3000/d/container-metrics/container-metrics-cadvisor?orgId=1
  GRAFANA_JMETER_TITLE: "JMeter Overview"
  GRAFANA_CAD_TITLE: "Container Metrics (cAdvisor)"
  GRAFANA_AUTH: admin:admin
  GRAFANA_ORGID_DEFAULT: "1"

jobs:
  perf:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        scen: [smoke, load, stress, spike, soak]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Stamp job start (ms)
        run: |
          echo "JOB_START_MS=$(($(date -u +%s) * 1000))" >> "$GITHUB_ENV"

      - name: Start stack (with renderer)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
          # wait for grafana
          for i in {1..60}; do
            if curl -fsS "$GRAFANA_URL/api/health" >/dev/null; then
              echo "Grafana is up"
              break
            fi
            sleep 2
          done
          # OPTIONAL: quick renderer ping (won't fail build)
          curl -fsS "http://localhost:8081/render/version" || true

      # -------- JMeter run --------
      - name: Run JMeter - ${{ matrix.scen }}
        env:
          SCEN: ${{ matrix.scen }}
        run: |
          set -eux
          mkdir -p jmeter/results/${SCEN}
          # Run test
          docker run --rm --network host \
            -e JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m" \
            -v "$PWD/jmeter:/jmeter" -w /jmeter \
            jmeter:5.6.3 \
            -n -t test-plans/${SCEN}.jmx \
            -Jthreads="${JM_THREADS:-50}" \
            -Jrampup="${JM_RAMPUP:-30}" \
            -Jduration="${JM_DURATION:-60}" \
            -l results/${SCEN}.jtl \
            -j results/${SCEN}.log \
            -e -o results/${SCEN}/html

      - name: Collect Grafana snapshots - ${{ matrix.scen }}
        env:
          SCEN: ${{ matrix.scen }}
        run: |
          set -eux

          OUT_DIR="jmeter/results/${SCEN}/grafana"
          mkdir -p "${OUT_DIR}"

          FROM_MS="${JOB_START_MS}"
          TO_MS=$(( $(date -u +%s) * 1000 ))
          AUTH_FLAG="-u ${GRAFANA_AUTH}"

          uriencode() { python3 - <<'PY'
import sys, urllib.parse
print(urllib.parse.quote(sys.argv[1], safe=":/?&=,_-"))
PY
          }

          parse_uid_slug_org () {
            local url="$1"
            local rest="${url#*/d/}"; local path="${rest%%\?*}"
            local uid="${path%%/*}"; local slug="${path#*/}"
            local q="${rest#*\?}"
            local org="$(echo "$q" | sed -n -E 's/.*(^|&)orgId=([^&]+).*/\2/p')"
            [ -z "$org" ] && org="${GRAFANA_ORGID_DEFAULT}"
            echo "$uid" "$slug" "$org"
          }

          resolve_uid () {
            local want_uid="$1" want_slug="$2" want_title="$3"
            # try direct
            if curl -fsS ${AUTH_FLAG} "${GRAFANA_URL}/api/dashboards/uid/${want_uid}" -o /tmp/d.json; then
              local got_uid slug_api
              got_uid="$(jq -r '.dashboard.uid' /tmp/d.json)"
              slug_api="$(jq -r '.meta.slug // (.dashboard.slug // empty)' /tmp/d.json)"
              rm -f /tmp/d.json
              echo "$got_uid" "${slug_api:-$want_slug}"
              return 0
            fi
            # search
            local res; res="$(curl -fsS ${AUTH_FLAG} "${GRAFANA_URL}/api/search?type=dash-db&limit=5000")"
            local uid url
            uid="$(echo "$res" | jq -r '
              map(select(
                   (.uid=="'"$want_uid"'")
                or (.url|endswith("/'"$want_slug"'"))
                or (.title=="'"$want_title"'")
                or (.slug=="'"$want_slug"'")
              )) | .[0].uid // empty')"
            url="$(echo "$res" | jq -r '
              map(select(
                   (.uid=="'"$want_uid"'")
                or (.url|endswith("/'"$want_slug"'"))
                or (.title=="'"$want_title"'")
                or (.slug=="'"$want_slug"'")
              )) | .[0].url // empty')"
            [ -z "$uid" ] && return 1
            echo "$uid" "${url##*/}"
          }

          list_panels () {
            local uid="$1"
            curl -fsS ${AUTH_FLAG} "${GRAFANA_URL}/api/dashboards/uid/${uid}" \
              | jq -r '
                  .dashboard
                  | .. | objects
                  | select(has("id") and has("title"))
                  | select(.type != "row")
                  | "\(.id)\t\(.title)"'
          }

          try_grafana_render () {
            local url="$1" out="$2"
            curl -sS ${AUTH_FLAG} -w "%{http_code}" -o "${out}.tmp" "${url}" || echo "000"
          }

          try_renderer_direct () {
            local inner_url="$1" out="$2"
            local enc="$(uriencode "$inner_url")"
            curl -sS -w "%{http_code}" -o "${out}.tmp" "http://localhost:8081/render?url=${enc}&width=1600&height=900&timeout=60" || echo "000"
          }

          render_dashboard () {
            local uid="$1" slug="$2" org="$3" title="$4"
            local base="$(echo "$title" | tr -cs '[:alnum:]_-' '_' | sed 's/_\+/_/g;s/^_//;s/_$//')"
            local out="${OUT_DIR}/${uid}_DASH_${base}.png"
            local url_dash="${GRAFANA_URL}/render/d/${uid}/${slug}?orgId=${org}&from=${FROM_MS}&to=${TO_MS}&tz=UTC&theme=dark"

            local code
            code="$(try_grafana_render "${url_dash}" "${out}")"
            if [ "$code" != "200" ]; then
              echo "Dashboard render via Grafana failed (${code}), trying renderer directly..."
              code="$(try_renderer_direct "${GRAFANA_URL}/d/${uid}/${slug}?orgId=${org}&from=${FROM_MS}&to=${TO_MS}&tz=UTC&theme=dark" "${out}")"
            fi
            if [ "$code" = "200" ]; then mv "${out}.tmp" "${out}"; echo "Saved ${out}"; else rm -f "${out}.tmp"; fi
          }

          render_panel () {
            local uid="$1" slug="$2" org="$3" pid="$4" title="$5"
            local base="$(echo "$title" | tr -cs '[:alnum:]_-' '_' | sed 's/_\+/_/g;s/^_//;s/_$//')"
            local out="${OUT_DIR}/${uid}_${pid}_${base}.png"
            local url1="${GRAFANA_URL}/render/d-solo/${uid}/${slug}?orgId=${org}&panelId=${pid}&from=${FROM_MS}&to=${TO_MS}&tz=UTC&theme=dark"
            local url2="${GRAFANA_URL}/render/d-solo/${uid}?orgId=${org}&panelId=${pid}&from=${FROM_MS}&to=${TO_MS}&tz=UTC&theme=dark"

            local code
            code="$(try_grafana_render "${url1}" "${out}")"
            if [ "$code" != "200" ]; then
              echo "Render 1 failed (${code}) â€“ trying without slug"
              code="$(try_grafana_render "${url2}" "${out}")"
            fi
            if [ "$code" != "200" ]; then
              echo "Render via Grafana failed (${code}), trying renderer directly..."
              code="$(try_renderer_direct "${GRAFANA_URL}/d-solo/${uid}/${slug}?orgId=${org}&panelId=${pid}&from=${FROM_MS}&to=${TO_MS}&tz=UTC&theme=dark" "${out}")"
            fi
            if [ "$code" = "200" ]; then mv "${out}.tmp" "${out}"; echo "Saved ${out}"; else rm -f "${out}.tmp"; fi
          }

          read JM_UID JM_SLUG JM_ORG < <(parse_uid_slug_org "$GRAFANA_JMETER_URL")
          read CAD_UID CAD_SLUG CAD_ORG < <(parse_uid_slug_org "$GRAFANA_CAD_URL")

          for rec in \
            "JM:${JM_UID}:${JM_SLUG}:${JM_ORG}:${GRAFANA_JMETER_TITLE}" \
            "CAD:${CAD_UID}:${CAD_SLUG}:${CAD_ORG}:${GRAFANA_CAD_TITLE}"
          do
            IFS=: read TAG WANT_UID WANT_SLUG ORG TITLE <<<"$rec"
            echo "Prepare ${TAG} want uid=${WANT_UID} slug=${WANT_SLUG}"

            # If UID not present yet, try import from repo dashboards (optional)
            if ! curl -fsS ${AUTH_FLAG} "${GRAFANA_URL}/api/dashboards/uid/${WANT_UID}" >/dev/null; then
              for f in "grafana/dashboards/${WANT_SLUG}.json" "grafana/dashboards/${WANT_SLUG%%-*}.json"; do
                [ -f "$f" ] || continue
                echo "Importing $f"
                payload=$(jq -c '{dashboard: ., overwrite: true}' "$f")
                curl -fsS ${AUTH_FLAG} -H "Content-Type: application/json" \
                  -X POST -d "$payload" "${GRAFANA_URL}/api/dashboards/db" >/dev/null || true
                break
              done
            fi

            if read -r REAL_UID REAL_SLUG < <(resolve_uid "${WANT_UID}" "${WANT_SLUG}" "${TITLE}"); then
              echo "${TAG} resolved -> ${REAL_UID} / ${REAL_SLUG}"

              # Full dashboard first (nice for artifacts)
              render_dashboard "${REAL_UID}" "${REAL_SLUG}" "${ORG}" "${TITLE}"

              # Then pick important panels if present
              list_panels "${REAL_UID}" | while IFS=$'\t' read -r PID PTITLE; do
                case "$PTITLE" in
                  *Requests*per*Second*|*Throughput*|*TPS*|*transactions*per*second*) render_panel "${REAL_UID}" "${REAL_SLUG}" "${ORG}" "${PID}" "${PTITLE}";;
                  *Latency*|*Response*Time*|*p90*|*p95*) render_panel "${REAL_UID}" "${REAL_SLUG}" "${ORG}" "${PID}" "${PTITLE}";;
                  *CPU*|*Memory*|*mem*|*container*|*cadvisor*) render_panel "${REAL_UID}" "${REAL_SLUG}" "${ORG}" "${PID}" "${PTITLE}";;
                esac
              done
            else
              echo "WARN: ${TAG} not found; skip rendering"
            fi
          done

          ls -l "${OUT_DIR}" || true

      - name: Upload artifacts - ${{ matrix.scen }}
        uses: actions/upload-artifact@v4
        with:
          name: perf-${{ matrix.scen }}
          path: |
            jmeter/results/${{ matrix.scen }}/html/**
            jmeter/results/${{ matrix.scen }}.jtl
            jmeter/results/${{ matrix.scen }}.log
            jmeter/results/${{ matrix.scen }}/grafana/**/*.png
          if-no-files-found: warn

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.override.yml down -v
