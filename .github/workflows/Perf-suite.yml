name: perf-suite

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  # schedule:
  #   - cron: "0 2 * * *"   # optional nightly

jobs:
  jmeter-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: smoke
            threads: 50
            rampup: 30
            duration: 60
          - scenario: load
            threads: 100
            rampup: 60
            duration: 180
          - scenario: stress
            threads: 300
            rampup: 60
            duration: 120
          - scenario: spike
            threads: 200
            rampup: 10
            duration: 60
          - scenario: soak
            threads: 50
            rampup: 30
            duration: 900

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start minimal infra (httpbin + monitoring)
        run: |
          set -eux
          docker compose up -d influxdb httpbin grafana loki promtail prometheus cadvisor
          sleep 15
          docker ps

      - name: Build JMeter image (5.6.3)
        run: docker build -t jmeter:5.6.3 ./jmeter/docker

      # ---- Run test AND generate dashboard (force XML); never fail the job here ----
      - name: Run ${{ matrix.scenario }} (headless; XML JTL; generate HTML)
        id: run_test
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          ROOT=jmeter/results
          OUT="$ROOT/$SCEN"
          XML_JTL="$ROOT/${SCEN}.xml.jtl"
          CSV_JTL="$ROOT/${SCEN}.jtl"   # if your JMX writes CSV, we keep it as an artifact

          # prep
          mkdir -p "$ROOT" "$OUT"
          rm -f "$XML_JTL" "$CSV_JTL" || true
          rm -rf "$OUT/html" || true

          # Force XML JTL and build dashboard in same process (-e -o)
          set +e
          docker run --rm --network host \
            -e JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m \
                         -Djmeter.save.saveservice.output_format=xml \
                         -Djmeter.save.saveservice.assertion_results=none" \
            -v "$GITHUB_WORKSPACE/jmeter:/jmeter" -w /jmeter jmeter:5.6.3 \
            -n -t testplans/httpbin_load.jmx \
            -Jthreads=${{ matrix.threads }} \
            -Jrampup=${{ matrix.rampup }} \
            -Jduration=${{ matrix.duration }} \
            -Jscenario_name=$SCEN \
            -Jtarget_host=localhost -Jtarget_port=8080 \
            -l "results/${SCEN}.xml.jtl" \
            -j "results/${SCEN}/jmeter.log" \
            -e -o "results/${SCEN}/html"
          EXIT=$?
          set -e

          echo "JMeter raw exit code (info only): $EXIT"
          echo "First line of XML (if present):" || true
          head -n 1 "$XML_JTL" || true
          test -f "$OUT/html/index.html" && echo "Dashboard generated." || echo "Dashboard missing."

          ls -l "$ROOT" || true
          ls -l "$OUT" || true

      # ---- Upload everything we produced ----
      - name: Upload artifacts (${{ matrix.scenario }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-${{ matrix.scenario }}-artifacts
          retention-days: 30
          if-no-files-found: warn
          path: |
            jmeter/results/${{ matrix.scenario }}/html
            jmeter/results/${{ matrix.scenario }}.xml.jtl
            jmeter/results/${{ matrix.scenario }}.jtl
            jmeter/results/${{ matrix.scenario }}/jmeter.log

      - name: Stop stack
        if: always()
        run: docker compose down -v
