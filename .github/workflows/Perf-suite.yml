name: perf-suite

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  # schedule:
  #   - cron: "0 2 * * *"  # nightly (optional)

jobs:
  jmeter-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: smoke
            threads: 50
            rampup: 30
            duration: 60
          - scenario: load
            threads: 100
            rampup: 60
            duration: 180
          - scenario: stress
            threads: 300
            rampup: 60
            duration: 120
          - scenario: spike
            threads: 200
            rampup: 10
            duration: 60
          - scenario: soak
            threads: 50
            rampup: 30
            duration: 900

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start minimal infra (httpbin + monitoring)
        run: |
          set -eux
          docker compose up -d influxdb httpbin grafana loki promtail prometheus cadvisor
          sleep 15
          docker ps

      - name: Build JMeter image (5.6.3)
        run: docker build -t jmeter:5.6.3 ./jmeter/docker

      # ------------------ RUN TEST (write XML JTL) ------------------
      - name: Run ${{ matrix.scenario }} test (headless; XML JTL + jmeter.log)
        id: run_test
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          rm -rf jmeter/results/$SCEN jmeter/results/$SCEN.jtl || true
          mkdir -p jmeter/results/$SCEN/html

          # Run JMeter headless and force XML output to avoid CSV column issues
          set +e
          docker run --rm --network host \
            -e JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m" \
            -v "$GITHUB_WORKSPACE/jmeter:/jmeter" -w /jmeter jmeter:5.6.3 \
            -q config/user.properties \
            -Jjmeter.save.saveservice.output_format=xml \
            -Jjmeter.save.saveservice.assertion_results=none \
            -Jjmeter.save.saveservice.response_message=true \
            -Jjmeter.save.saveservice.response_code=true \
            -Jjmeter.save.saveservice.successful=true \
            -Jjmeter.save.saveservice.bytes=true \
            -Jjmeter.save.saveservice.sent_bytes=true \
            -Jjmeter.save.saveservice.url=true \
            -Jjmeter.save.saveservice.latency=true \
            -Jjmeter.save.saveservice.idle_time=true \
            -Jjmeter.save.saveservice.connect_time=true \
            -n -t testplans/httpbin_load.jmx \
            -Jthreads=${{ matrix.threads }} \
            -Jrampup=${{ matrix.rampup }} \
            -Jduration=${{ matrix.duration }} \
            -Jscenario_name=$SCEN \
            -Jtarget_host=localhost -Jtarget_port=8080 \
            -l results/$SCEN.jtl \
            -j results/$SCEN/jmeter.log
          EXIT=$?
          set -e

          # Show the first line (should be XML prolog)
          head -n 1 jmeter/results/$SCEN.jtl || true
          echo "exit_code=$EXIT" >> $GITHUB_OUTPUT

      # ------------------ Generate HTML (works with XML JTL) ------------------
      - name: Generate HTML report (${{ matrix.scenario }})
        if: always()
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          FILE="jmeter/results/$SCEN.jtl"
          if [ -s "$FILE" ]; then
            docker run --rm --network host \
              -e JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m" \
              -v "$GITHUB_WORKSPACE/jmeter:/jmeter" -w /jmeter jmeter:5.6.3 \
              -g "results/$SCEN.jtl" -o "results/$SCEN/html"
          else
            echo "No JTL for $SCEN; skipping HTML generation."
          fi
          ls -R jmeter/results/$SCEN || true

      # ------------------ Always upload artifacts ------------------
      - name: Upload artifacts (${{ matrix.scenario }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-${{ matrix.scenario }}-artifacts
          retention-days: 30
          if-no-files-found: warn
          path: |
            jmeter/results/${{ matrix.scenario }}/html
            jmeter/results/${{ matrix.scenario }}.jtl
            jmeter/results/${{ matrix.scenario }}/jmeter.log

      - name: Stop stack
        if: always()
        run: docker compose down -v

      # ------------------ Fail job only at the end if JMeter failed ------------------
      - name: Fail job if scenario failed
        if: steps.run_test.outputs.exit_code != '0'
        run: |
          echo "JMeter exit code: ${{ steps.run_test.outputs.exit_code }}"
          exit 1
