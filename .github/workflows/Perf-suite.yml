name: perf-suite

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  jmeter-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: smoke
            threads: 50
            rampup: 30
            duration: 60
          - scenario: load
            threads: 100
            rampup: 60
            duration: 180
          - scenario: stress
            threads: 300
            rampup: 60
            duration: 120
          - scenario: spike
            threads: 200
            rampup: 10
            duration: 60
          - scenario: soak
            threads: 50
            rampup: 30
            duration: 300

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start minimal infra (httpbin + monitoring)
        run: |
          set -eux
          docker compose up -d influxdb httpbin grafana loki promtail prometheus cadvisor
          sleep 15
          docker ps

      - name: Build JMeter image (5.6.3)
        run: docker build -t jmeter:5.6.3 ./jmeter/docker

      # ---- Run test, write CSV (17 columns + header), and build dashboard in one go ----
      - name: Run ${{ matrix.scenario }} (headless; CSV JTL; generate HTML)
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          ROOT=jmeter/results
          OUT="$ROOT/$SCEN"
          CSV_JTL="$ROOT/${SCEN}.csv"

          mkdir -p "$OUT"
          rm -f "$CSV_JTL" || true
          rm -rf "$OUT/html" || true

          # Force the exact CSV layout the report generator expects (with header)
          # and generate dashboard (-e -o) in the same JMeter process.
          set +e
          docker run --rm --network host \
            -e JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m" \
            -v "$GITHUB_WORKSPACE/jmeter:/jmeter" -w /jmeter jmeter:5.6.3 \
            -n -t testplans/httpbin_load.jmx \
            -Jthreads=${{ matrix.threads }} \
            -Jrampup=${{ matrix.rampup }} \
            -Jduration=${{ matrix.duration }} \
            -Jscenario_name=$SCEN \
            -Jtarget_host=localhost -Jtarget_port=8080 \
            -Jjmeter.save.saveservice.output_format=csv \
            -Jjmeter.save.saveservice.print_field_names=true \
            -Jjmeter.save.saveservice.default_delimiter=, \
            -Jjmeter.save.saveservice.timestamp_format=ms \
            -Jjmeter.save.saveservice.data_type=true \
            -Jjmeter.save.saveservice.label=true \
            -Jjmeter.save.saveservice.response_code=true \
            -Jjmeter.save.saveservice.response_message=true \
            -Jjmeter.save.saveservice.thread_name=true \
            -Jjmeter.save.saveservice.successful=true \
            -Jjmeter.save.saveservice.failure_message=true \
            -Jjmeter.save.saveservice.bytes=true \
            -Jjmeter.save.saveservice.sent_bytes=true \
            -Jjmeter.save.saveservice.grp_threads=true \
            -Jjmeter.save.saveservice.all_threads=true \
            -Jjmeter.save.saveservice.url=true \
            -Jjmeter.save.saveservice.latency=true \
            -Jjmeter.save.saveservice.idle_time=true \
            -Jjmeter.save.saveservice.connect_time=true \
            -l "results/${SCEN}.csv" \
            -j "results/${SCEN}/jmeter.log" \
            -e -o "results/${SCEN}/html"
          EXIT=$?
          set -e

          echo "JMeter raw exit code (info only): $EXIT"
          echo "CSV header (should be 17 columns):"
          head -n 1 "$CSV_JTL" || true
          test -f "$OUT/html/index.html" && echo "Dashboard generated." || echo "Dashboard missing."

          ls -l "$ROOT" || true
          ls -l "$OUT" || true

      - name: Upload artifacts (${{ matrix.scenario }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-${{ matrix.scenario }}-artifacts
          retention-days: 30
          if-no-files-found: warn
          path: |
            jmeter/results/${{ matrix.scenario }}/html
            jmeter/results/${{ matrix.scenario }}.csv
            jmeter/results/${{ matrix.scenario }}/jmeter.log
            jmeter/results/${{ matrix.scenario }}/grafana


      # ---- Upload artifacts for each scenario ----
      - name: Upload artifacts (${{ matrix.scenario }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-${{ matrix.scenario }}-artifacts
          retention-days: 30
          if-no-files-found: warn
          path: |
            jmeter/results/${{ matrix.scenario }}/html
            jmeter/results/${{ matrix.scenario }}.csv
            jmeter/results/${{ matrix.scenario }}/jmeter.log

      - name: Render Grafana panels (${{ matrix.scenario }})
        if: always()
        run: |
          set -eux
          SCEN=${{ matrix.scenario }}
          RAMP=${{ matrix.rampup }}
          DUR=${{ matrix.duration }}
          RANGE=$((RAMP + DUR + 120))   # seconds back from now
          TO_ms=$(( $(date -u +%s) * 1000 ))
          FROM_ms=$(( $(date -u -d "-${RANGE} seconds" +%s) * 1000 ))

          OUT_DIR="jmeter/results/${SCEN}/grafana"
          mkdir -p "${OUT_DIR}"

          # Wait for Grafana + renderer to be ready
          for i in {1..30}; do
            curl -fsS http://localhost:3000/api/health >/dev/null && break || sleep 2
          done

          # --- OPTION A: use admin/basic auth (set above in compose) ---
          AUTH="admin:admin"
          AUTH_FLAG="-u ${AUTH}"

          # If you know your JMeter dashboard UID, put it here.
          # If you provisioned from this repo, you can read it from the JSON file:
          JM_DASH_UID=$(jq -r '.uid // .dashboard.uid' grafana/dashboards/jmeter-overview.json 2>/dev/null || echo "jmeter-overview")

          # Helper to render one panel by id into a file
          render_panel () {
            local panel_id="$1"
            local outfile="$2"
            curl -fsSL ${AUTH_FLAG} \
              "http://localhost:3000/render/d-solo/${JM_DASH_UID}?orgId=1&panelId=${panel_id}&from=${FROM_ms}&to=${TO_ms}&width=1600&height=800&tz=UTC&theme=dark" \
              -o "${outfile}"
          }

          # If you don't know your panel IDs, print them once:
          echo "Listing available panels (id: title):"
          curl -fsSL ${AUTH_FLAG} "http://localhost:3000/api/dashboards/uid/${JM_DASH_UID}" \
            | jq -r '.dashboard.panels[] | "\(.id): \(.title)"' || true

          # >>>> SET THESE to match your dashboard <<<<
          RPS_ID=${RPS_ID:-2}
          ERR_ID=${ERR_ID:-4}
          LAT_ID=${LAT_ID:-3}

          render_panel "${RPS_ID}" "${OUT_DIR}/requests_per_second.png" || true
          render_panel "${ERR_ID}" "${OUT_DIR}/error_percent.png"       || true
          render_panel "${LAT_ID}" "${OUT_DIR}/latency.png"             || true

          ls -l "${OUT_DIR}" || true

      - name: Stop stack
        if: always()
        run: docker compose down -v
