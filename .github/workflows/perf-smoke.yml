name: perf-suite

on:
  workflow_dispatch:
  push:

jobs:
  jmeter-matrix:
    name: jmeter-matrix (${{ matrix.scenario }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # tune threads/ramp/duration to match your repo
          - scenario: smoke
            jmx: testplans/httpbin_smoke.jmx
            threads: 50
            ramp: 30
            duration: 60
          - scenario: load
            jmx: testplans/httpbin_load.jmx
            threads: 100
            ramp: 60
            duration: 180
          - scenario: stress
            jmx: testplans/httpbin_stress.jmx
            threads: 300
            ramp: 60
            duration: 120
          - scenario: spike
            jmx: testplans/httpbin_spike.jmx
            threads: 200
            ramp: 10
            duration: 60
          - scenario: soak
            jmx: testplans/httpbin_soak.jmx
            threads: 50
            ramp: 30
            duration: 900

    env:
      # Grafana & auth
      GRAFANA_URL: http://localhost:3000
      GRAFANA_JMETER_URL: http://localhost:3000/d/JMeterOverview/jmeter-overview?orgId=1
      GRAFANA_CAD_URL: http://localhost:3000/d/container-metrics/container-metrics-cadvisor?orgId=1
      GRAFANA_AUTH: admin:admin
      GRAFANA_ORGID_DEFAULT: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Mark job start (for Grafana time range)
        run: echo "JOB_START_MS=$(( $(date -u +%s) * 1000 ))" >> "$GITHUB_ENV"

      - name: Start minimal infra (httpbin + monitoring)
        run: |
          docker compose up -d
          # wait for Grafanaâ€™s /api/health first
          for i in {1..60}; do
            if curl -fsS "${GRAFANA_URL}/api/health" >/dev/null; then
              echo "Grafana API up"; break
            fi
            echo "Waiting for Grafana API ... ($i)"
            sleep 2
          done

      - name: Build JMeter image (5.6.3)
        run: |
          docker build -t jmeter:5.6.3 jmeter

      - name: Run ${{ matrix.scenario }} test (headless; CSV JTL; generate HTML)
        env:
          SCEN: ${{ matrix.scenario }}
          JMX: ${{ matrix.jmx }}
          THREADS: ${{ matrix.threads }}
          RAMP: ${{ matrix.ramp }}
          DURATION: ${{ matrix.duration }}
        run: |
          set -eux
          mkdir -p "jmeter/results/${SCEN}/html"
          # ensure CSV JTL & a fixed column set JMeter can export
          JVM_ARGS="-Djava.awt.headless=true -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m"
          docker run --rm --network host \
            -e JVM_ARGS="$JVM_ARGS" \
            -v "$PWD/jmeter:/jmeter" -w /jmeter \
            jmeter:5.6.3 -n -t "$JMX" \
            -Jthreads="${THREADS}" -Jramp="${RAMP}" -Jduration="${DURATION}" \
            -Jjmeter.save.saveservice.output_format=csv \
            -Jjmeter.save.saveservice.assertion_results_failure_message=true \
            -l "results/${SCEN}.jtl" \
            -j "results/${SCEN}/jmeter.log" \
            -e -o "results/${SCEN}/html"

      - name: Render Grafana panels (${{ matrix.scenario }})
        env:
          SCEN: ${{ matrix.scenario }}
        run: |
          set -eux
          OUT_DIR="jmeter/results/${SCEN}/grafana"
          mkdir -p "${OUT_DIR}"

          FROM_MS="${JOB_START_MS}"
          TO_MS=$(( $(date -u +%s) * 1000 ))
          AUTH_FLAG="-u ${GRAFANA_AUTH}"

          # --- helpers --------------------------------------------------------
          # parse: /d/<uid>/<slug>?orgId=N  ->  uid slug orgId
          parse_uid_slug () {
            local url="$1"
            local rest="$(echo "$url" | sed -E 's#^https?://[^/]+/d/##')"
            local path="${rest%%\?*}"
            local q="${rest#*\?}"
            local uid="${path%%/*}"
            local slug="${path#*/}"
            local org="$(echo "$q" | sed -n -E 's/.*(^|&)orgId=([^&]+).*/\2/p')"
            [ -z "$org" ] && org="${GRAFANA_ORGID_DEFAULT}"
            echo "$uid" "$slug" "$org"
          }

          wait_dash () {
            # wait for dashboard UID to be available (provisioning can lag)
            local uid="$1"
            for i in {1..60}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" ${AUTH_FLAG} \
                     "${GRAFANA_URL}/api/dashboards/uid/${uid}")
              if [ "$code" = "200" ]; then
                echo "Dashboard ${uid} ready"
                return 0
              fi
              echo "Waiting for dashboard ${uid} (HTTP ${code})... ($i)"
              sleep 2
            done
            echo "ERROR: dashboard ${uid} not available in time"
            return 1
          }

          list_panels () {
            local uid="$1"
            curl -fsSL ${AUTH_FLAG} "${GRAFANA_URL}/api/dashboards/uid/${uid}" \
              | jq -r '
                  .dashboard
                  | .. | objects
                  | select(has("id") and has("title"))
                  | select(.type != "row")
                  | "\(.id)\t\(.title)"'
          }

          render_panel () {
            local uid="$1" slug="$2" org="$3" pid="$4" title="$5"
            local base="$(echo "$title" | tr -cs '[:alnum:]_-' '_' | sed 's/_\+/_/g;s/^_//;s/_$//')"
            local out="${OUT_DIR}/${uid}_${pid}_${base}.png"
            curl -fsSL ${AUTH_FLAG} \
              "${GRAFANA_URL}/render/d-solo/${uid}/${slug}?orgId=${org}&panelId=${pid}&from=${FROM_MS}&to=${TO_MS}&width=1600&height=800&tz=UTC&theme=dark" \
              -o "${out}" || true
            echo "Saved: ${out}"
          }
          # --------------------------------------------------------------------

          read JM_UID JM_SLUG JM_ORGID   < <(parse_uid_slug "$GRAFANA_JMETER_URL")
          read CAD_UID CAD_SLUG CAD_ORGID < <(parse_uid_slug "$GRAFANA_CAD_URL")

          echo "JMeterOverview -> uid=${JM_UID} slug=${JM_SLUG} orgId=${JM_ORGID}"
          echo "cAdvisor      -> uid=${CAD_UID} slug=${CAD_SLUG} orgId=${CAD_ORGID}"

          # wait until dashboards exist (prevents 404)
          wait_dash "${JM_UID}"
          wait_dash "${CAD_UID}"

          for rec in "JM:${JM_UID}:${JM_SLUG}:${JM_ORGID}" "CAD:${CAD_UID}:${CAD_SLUG}:${CAD_ORGID}"; do
            IFS=: read TAG DUID DSLUG DORGID <<<"${rec}"
            echo "Rendering ${TAG} dashboard (uid=${DUID} slug=${DSLUG})..."
            list_panels "${DUID}" | while IFS=$'\t' read -r PID PTITLE; do
              echo "  panelId=${PID}  title=${PTITLE}"
              render_panel "${DUID}" "${DSLUG}" "${DORGID}" "${PID}" "${PTITLE}"
            done
          done

          ls -l "${OUT_DIR}" || true

      - name: Upload artifacts (${{ matrix.scenario }})
        uses: actions/upload-artifact@v4
        with:
          name: perf-${{ matrix.scenario }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            jmeter/results/${{ matrix.scenario }}/html/**
            jmeter/results/${{ matrix.scenario }}/jmeter.log
            jmeter/results/${{ matrix.scenario }}.jtl
            jmeter/results/${{ matrix.scenario }}/grafana/**/*.png
          if-no-files-found: warn
          retention-days: 7

      - name: Stop stack
        if: always()
        run: docker compose down -v
